import React, { useEffect, useState } from "react";
import {
  Box,
  Card,
  CardContent,
  TextField,
  Stack,
  Grid,
  Divider,
  Button,
  Typography,
  InputAdornment,
  IconButton,
  FormControl,
  InputLabel,
  OutlinedInput,
} from "@mui/material";

import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";

import { useRouter } from "next/router";
import Image from "next/image";

import api from "../../services/api";
import { setStorage, getStorage } from "../../utils/storage";
import useToast from "../../utils/toast";
import PngWingPng from "../../public/static/logo/pngwing.png";

const ResetPasswordChange = () => {
  const router = useRouter();
  const [displayToast] = useToast();
  const [nip, setNIP] = useState("");
  const [accessToken, setAccessToken] = useState("");

  const [validationError, setValidationError] = useState(false);
  const [showPassword, setShowPassword] = useState({
    new_password: false,
    confirm_new_password: false,
  });
  const [resetValue, setResetValue] = useState({
    new_password: "",
    confirm_new_password: "",
  });

  const handleChange = (event) => {
    setResetValue({ ...resetValue, [event.target.name]: event.target.value });
  };

  useEffect(() => {
    const getNip = getStorage("nip");
    const getAccessToken = getStorage("access_token");
    setNIP(getNip);
    setAccessToken(getAccessToken);
  }, [getStorage]);

  useEffect(() => {
    setValidationError(false);
    if (
      resetValue.new_password === "" ||
      resetValue.confirm_new_password === ""
    ) {
      setValidationError(false);
    } else if (resetValue.new_password !== resetValue.confirm_new_password) {
      setValidationError(true);
    }
  }, [resetValue]);

  const handleClickShowPassword = (event, id) => {
    event.preventDefault();
    if (id === "new_password") {
      setShowPassword({
        ...showPassword,
        new_password: !showPassword.new_password,
      });
    }
    if (id === "confirm_new_password") {
      setShowPassword({
        ...showPassword,
        confirm_new_password: !showPassword.confirm_new_password,
      });
    }
  };

  async function onFinish() {
    let postData = {
      nip: nip,
      password: resetValue.new_password,
    };

    try {
      await api.resetPass(postData);
      router.replace("/");
    } catch (error) {
      displayToast("error", "Failed to login");
    }
  }

  return (
    <>
      <Box
        sx={{
          backgroundColor: "#F5F5F5",
          backgroundSize: "cover",
          backgroundRepeat: "no-repeat",
          width: "100%",
          height: "100vh",
          position: "absolute",
          left: 0,
        }}
      >
        <Grid
          container
          spacing={0}
          direction="column"
          alignItems="center"
          justifyContent="center"
          style={{ minHeight: "100vh" }}
        >
          <Grid
            item
            xs={3}
            sx={{
              zIndex: "5",
            }}
          >
            <Card
              variant="outlined"
              sx={{
                width: "380px",
                background: "#FFFFFF",
                boxShadow: "0px 2px 10px rgba(0, 0, 0, 0.05)",
                borderRadius: " 12px",
                padding: "10px 0px",
              }}
            >
              <CardContent>
                <Stack component="form" spacing={2} noValidate>
                  <Box display={"flex"} justifyContent={"center"}>
                    <Image
                      src={PngWingPng}
                      width={100}
                      height={100}
                      alt="Png Wing Logo"
                    />
                  </Box>
                  <Divider sx={{ marginTop: "16px" }} />
                  <FormControl variant="outlined" fullWidth>
                    <InputLabel htmlFor="new_password">New Password</InputLabel>
                    <OutlinedInput
                      fullWidth
                      label="New Password"
                      name="new_password"
                      type={showPassword.new_password ? "text" : "password"}
                      value={resetValue.new_password}
                      onChange={handleChange}
                      endAdornment={
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle password visibility"
                            onClick={(e) => {
                              handleClickShowPassword(e, "new_password");
                            }}
                            edge="end"
                          >
                            {showPassword.new_password ? (
                              <VisibilityOffIcon />
                            ) : (
                              <VisibilityIcon />
                            )}
                          </IconButton>
                        </InputAdornment>
                      }
                    />
                  </FormControl>

                  <FormControl variant="outlined" fullWidth>
                    <InputLabel htmlFor="new_password">
                      Confirm New Password
                    </InputLabel>
                    <OutlinedInput
                      fullWidth
                      label="Confirm New Password"
                      name="confirm_new_password"
                      type={
                        showPassword.confirm_new_password ? "text" : "password"
                      }
                      value={resetValue.confirm_new_password}
                      onChange={handleChange}
                      endAdornment={
                        <InputAdornment position="end">
                          <IconButton
                            aria-label="toggle password visibility"
                            onClick={(e) => {
                              handleClickShowPassword(
                                e,
                                "confirm_new_password"
                              );
                            }}
                            edge="end"
                          >
                            {showPassword.confirm_new_password ? (
                              <VisibilityOffIcon />
                            ) : (
                              <VisibilityIcon />
                            )}
                          </IconButton>
                        </InputAdornment>
                      }
                    />
                  </FormControl>
                  {validationError && (
                    <Typography variant="body1" color="error">
                      *Mismatched Password
                    </Typography>
                  )}
                  <Divider sx={{ mt: 2 }} />
                  <Button
                    disabled={
                      !resetValue.new_password ||
                      !resetValue.confirm_new_password
                    }
                    onClick={onFinish}
                    sx={{ mt: 3 }}
                    variant="contained"
                  >
                    Change Password
                  </Button>
                </Stack>
              </CardContent>
            </Card>
          </Grid>
        </Grid>
      </Box>
    </>
  );
};

export default ResetPasswordChange;
